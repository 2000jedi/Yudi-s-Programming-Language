class Int32 {
    var val : int32;
    
    function new(v : int32) {
        this.val = v;
    }
}

class Fp32 {
    var val : fp32;

    function new(v : fp32) {
        this.val = v;
    }
}

union optional<T> {
    enum None {}
    enum Some {
        var v : T; # T: type variable
        var s : T;
    }
}

function print_o<T>(o : optional<T>) {
    match (o) {
        None {
            print("None");
        }
        Some(s) {
            print("v:", s.v.val);
            print("s:", s.s.val);
        }
    }
}

function main() {
    var opt : optional<Int32> = optional.None<Int32>();
    print_o<Int32>(opt);
    opt = optional.Some<Int32>(Int32(1), Int32(2));
    print_o<Int32>(opt);
}
