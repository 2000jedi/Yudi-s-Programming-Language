union Optional_Bag {
    enum None {}
    enum Some {
        var val : Bag;
    }
}

class Temp <T> {
    var v : T;
    function new(v : T) {
        this.v = v;
    }
}

class Bag {
    var ival : int32;
    var fval : fp32;

    function new(a : int32, b : fp32){
        this.ival = a;
        this.fval = b;
    }

    function add() {
        this.ival = this.ival + 1;
        this.fval = this.fval + 1.0;
    }
}

function print_bag(b_opt : Optional_Bag) {
    match (b_opt) {
        None {
            print("Bag is empty");
        }
        Some(b) {
            b.val.add();
            print(b.val.ival, b.val.fval);
        }
    }
}

function main() {
    var bag_opt : Optional_Bag = Optional_Bag.Some(Bag(0, 1.0));
    print_bag(bag_opt);
    bag_opt = Optional_Bag.None();
    print_bag(bag_opt);
    
    # var bag2 : Bag = bag; TODO: initialize with move, copy, and deepcopy
}
